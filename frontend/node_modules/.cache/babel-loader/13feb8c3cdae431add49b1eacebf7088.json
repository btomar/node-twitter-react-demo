{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport useInterval from './hooks/useInterval';\n\nconst useTwitterApi = () => {\n  const [tweets, setTweets] = useState({\n    tweets: []\n  });\n  const [url, setUrl] = useState(`http://localhost:3001/api/v1/statuses/home_timeline`);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [delay, setDelay] = useState(2000);\n  useInterval(() => {\n    // Do some API call here\n    const fetchTweetUpdates = async () => {\n      setIsError(false);\n      setIsLoading(true);\n\n      try {\n        const result = await axios(`http://localhost:3001/api/v1/statuses/filter?screen_name=${query}`);\n        setTweets(result.data);\n      } catch (error) {\n        setIsError(true);\n      }\n\n      setIsLoading(false);\n    };\n\n    fetchTweetUpdates();\n    setTimeout(() => {\n      console.log('Fetching user latest tweers');\n    }, 2000);\n  }, delay);\n  useEffect(() => {\n    const fetchTweets = async () => {\n      setIsError(false);\n      setIsLoading(true);\n\n      try {\n        const result = await axios(url);\n        setTweets(result.data);\n      } catch (error) {\n        setIsError(true);\n      }\n\n      setIsLoading(false);\n    };\n\n    fetchTweets();\n  }, [url]);\n  return [{\n    tweets,\n    isLoading,\n    isError\n  }, setUrl];\n};\n\nexport default useTwitterApi;","map":{"version":3,"sources":["/home/tomarb/twitter-node/slync-test-bhuvanesh-tomar/frontend/react-node-twitter-app/src/hooks/useTwitterApi.js"],"names":["useState","useEffect","axios","useInterval","useTwitterApi","tweets","setTweets","url","setUrl","isError","setIsError","isLoading","setIsLoading","delay","setDelay","fetchTweetUpdates","result","query","data","error","setTimeout","console","log","fetchTweets"],"mappings":"AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAmC,OAAnC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC;AAAEK,IAAAA,MAAM,EAAE;AAAV,GAAD,CAApC;AACA,QAAM,CAACE,GAAD,EAAMC,MAAN,IAAgBR,QAAQ,CAC3B,qDAD2B,CAA9B;AAGA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,IAAD,CAAlC;AAEAG,EAAAA,WAAW,CAAC,MAAM;AAChB;AACA,UAAMY,iBAAiB,GAAG,YAAY;AACpCL,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAI;AACF,cAAMI,MAAM,GAAG,MAAMd,KAAK,CAAE,4DAA2De,KAAM,EAAnE,CAA1B;AACAX,QAAAA,SAAS,CAACU,MAAM,CAACE,IAAR,CAAT;AACD,OAHD,CAGE,OAAOC,KAAP,EAAc;AACdT,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD;;AACDE,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAVD;;AAYAG,IAAAA,iBAAiB;AACjBK,IAAAA,UAAU,CAAC,MAAM;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAlBU,EAkBRT,KAlBQ,CAAX;AAoBAZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,WAAW,GAAG,YAAY;AAC9Bb,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,UAAI;AACF,cAAMI,MAAM,GAAG,MAAMd,KAAK,CAACK,GAAD,CAA1B;AAEAD,QAAAA,SAAS,CAACU,MAAM,CAACE,IAAR,CAAT;AACD,OAJD,CAIE,OAAOC,KAAP,EAAc;AACdT,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD;;AAEDE,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAbD;;AAeAW,IAAAA,WAAW;AAGZ,GAnBQ,EAmBN,CAAChB,GAAD,CAnBM,CAAT;AAsBA,SAAO,CAAC;AAAEF,IAAAA,MAAF;AAAUM,IAAAA,SAAV;AAAqBF,IAAAA;AAArB,GAAD,EAAiCD,MAAjC,CAAP;AACD,CApDD;;AAsDA,eAAeJ,aAAf","sourcesContent":["\nimport { useState, useEffect} from 'react';\nimport axios from 'axios';\nimport useInterval from './hooks/useInterval';\n\nconst useTwitterApi = () => {\n  const [tweets, setTweets] = useState({ tweets: [] });\n  const [url, setUrl] = useState(\n    `http://localhost:3001/api/v1/statuses/home_timeline`,\n  );\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [delay, setDelay] = useState(2000);\n\n  useInterval(() => {\n    // Do some API call here\n    const fetchTweetUpdates = async () => {\n      setIsError(false);\n      setIsLoading(true);\n      try {\n        const result = await axios(`http://localhost:3001/api/v1/statuses/filter?screen_name=${query}`);\n        setTweets(result.data);\n      } catch (error) {\n        setIsError(true);\n      }\n      setIsLoading(false);\n    };\n \n    fetchTweetUpdates();\n    setTimeout(() => {\n      console.log('Fetching user latest tweers');\n    }, 2000);\n  }, delay);\n\n  useEffect(() => {\n    const fetchTweets = async () => {\n      setIsError(false);\n      setIsLoading(true);\n \n      try {\n        const result = await axios(url);\n \n        setTweets(result.data);\n      } catch (error) {\n        setIsError(true);\n      }\n \n      setIsLoading(false);\n    };\n \n    fetchTweets();\n\n\n  }, [url]);\n\n \n  return [{ tweets, isLoading, isError }, setUrl];\n}\n\nexport default useTwitterApi;"]},"metadata":{},"sourceType":"module"}