{"ast":null,"code":"var _jsxFileName = \"/home/tomarb/twitter-node/slync-test-bhuvanesh-tomar/frontend/react-node-twitter-app/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { Container } from 'semantic-ui-react';\nimport Header from './components/Header/Header';\nimport Tweet from './components/Tweet/Tweet';\n\nfunction App() {\n  const [data, setData] = useState({\n    tweets: []\n  });\n  const [query, setQuery] = useState('bhtomar');\n  const [search, setSearch] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  var tweets = [];\n  var tweetCards = [];\n  let newTerm = 'bhtomar';\n\n  function refreshTweets() {\n    tweetCards = tweets.map(tweet => {\n      return /*#__PURE__*/React.createElement(Tweet, {\n        key: tweet.id,\n        tweet: tweet,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 14\n        }\n      });\n    });\n  }\n\n  useEffect(async () => {\n    const fetchTweets = async () => {\n      setIsLoading(true);\n      const result = await axios.get(`http://localhost:3001/api/v1/timeline?screen_name=${query}`); //console.log(result);\n\n      setData(result.data);\n      setIsLoading(false);\n      refreshTweets();\n    };\n\n    fetchTweets();\n  }, [query]);\n  return [fetchTweets(), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"Demo App using React, NodeJS and Twitter API\"))), \",\", /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: query,\n    onChange: event => setQuery(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => setSearch(query),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, \"Search\"), isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"Loading ...\") : /*#__PURE__*/React.createElement(Container, {\n    className: \"dashboard-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, tweetCards)))];\n} // searchUserName = (newTerm) => {\n//   axios.get('http://localhost:3001/api/v1/timeline', null, { params: {\n//     user_name: newTerm\n//   } \n//   })\n//   .then(function (response) {\n//     console.log(response.data);\n//     let userTweets = response.data;\n//     this.setState({ tweets: userTweets });\n//   })\n//   .catch(function (error) {\n//     console.log(JSON.stringify(error));\n//   });\n// }\n// updateFilterTerm = (keyword) => {\n//   axios.get('http://localhost:3001/api/v1/statuses/filter', null, { params: {\n//     track: keyword\n//   } \n//   })\n//   .then(function (response) {\n//     let tweets = response.data;\n//     this.setState({ tweets });\n//   })\n//   .catch(function (error) {\n//     console.log(JSON.stringify(error));\n//   });\n// }\n// render() {\n//   let tweets = this.state.tweets.reverse()\n//   let tweetCards = tweets.map((tweet) => {\n//     return <Tweet key={tweet.id} tweet={tweet} />\n//   })\n//   return (\n//     <>\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <p>\n//           Demo App using React, NodeJS and Twitter API\n//         </p>\n//       </header>\n//     </div>,\n//     <Header searchUserName={this.searchUserName} updateFilterTerm={this.updateFilterTerm}/>\n//     <Container className=\"dashboard-container\">\n//       {tweetCards}\n//     </Container>\n//   </>\n//   );\n// }\n//}\n\n\nexport default App;","map":{"version":3,"sources":["/home/tomarb/twitter-node/slync-test-bhuvanesh-tomar/frontend/react-node-twitter-app/src/App.js"],"names":["React","useEffect","useState","axios","Container","Header","Tweet","App","data","setData","tweets","query","setQuery","search","setSearch","isLoading","setIsLoading","tweetCards","newTerm","refreshTweets","map","tweet","id","fetchTweets","result","get","event","target","value"],"mappings":"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","sourcesContent":["import React,{useEffect, useState}  from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { Container } from 'semantic-ui-react';\nimport Header from './components/Header/Header';\nimport Tweet from './components/Tweet/Tweet';\n\nfunction App()  {\n  const[data, setData] = useState({tweets: []});\n  const [query, setQuery] = useState('bhtomar');\n  const [search, setSearch] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  var tweets = [];\n  var tweetCards = [];\n  let newTerm = 'bhtomar'\n\n  function refreshTweets() {\n    tweetCards = tweets.map((tweet) => {\n      return <Tweet key={tweet.id} tweet={tweet} />\n    });\n  }\n\n  useEffect(async () => {\n    const fetchTweets = async () => {\n      setIsLoading(true);\n      const result = await axios.get(`http://localhost:3001/api/v1/timeline?screen_name=${query}`,);\n      //console.log(result);\n      setData(result.data);\n      setIsLoading(false);\n      refreshTweets();\n      \n    };\n    fetchTweets();\n   \n    }, [query]);\n\n  \n\n  return ([\n    fetchTweets(),\n    <>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Demo App using React, NodeJS and Twitter API\n        </p>\n      </header>\n    </div>,\n    <>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={event => setQuery(event.target.value)}\n      />\n      <button type=\"button\" onClick={() => setSearch(query)}>\n        Search\n      </button>\n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n      <Container className=\"dashboard-container\">\n        {tweetCards}\n      </Container>\n      )}\n    </>\n    \n  </>\n  ]);\n}\n  // searchUserName = (newTerm) => {\n  //   axios.get('http://localhost:3001/api/v1/timeline', null, { params: {\n  //     user_name: newTerm\n  //   } \n  //   })\n  //   .then(function (response) {\n  //     console.log(response.data);\n  //     let userTweets = response.data;\n  //     this.setState({ tweets: userTweets });\n  //   })\n  //   .catch(function (error) {\n  //     console.log(JSON.stringify(error));\n  //   });\n  // }\n\n  // updateFilterTerm = (keyword) => {\n  //   axios.get('http://localhost:3001/api/v1/statuses/filter', null, { params: {\n  //     track: keyword\n  //   } \n  //   })\n  //   .then(function (response) {\n  //     let tweets = response.data;\n  //     this.setState({ tweets });\n  //   })\n  //   .catch(function (error) {\n  //     console.log(JSON.stringify(error));\n  //   });\n  // }\n\n  // render() {\n  //   let tweets = this.state.tweets.reverse()\n  //   let tweetCards = tweets.map((tweet) => {\n  //     return <Tweet key={tweet.id} tweet={tweet} />\n  //   })\n  //   return (\n  //     <>\n  //     <div className=\"App\">\n  //       <header className=\"App-header\">\n  //         <p>\n  //           Demo App using React, NodeJS and Twitter API\n  //         </p>\n  //       </header>\n  //     </div>,\n  //     <Header searchUserName={this.searchUserName} updateFilterTerm={this.updateFilterTerm}/>\n  //     <Container className=\"dashboard-container\">\n  //       {tweetCards}\n  //     </Container>\n  //   </>\n  //   );\n  // }\n\n  //}\n  \n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}