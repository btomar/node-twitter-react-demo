{"ast":null,"code":"var _jsxFileName = \"/home/tomarb/twitter-node/slync-test-bhuvanesh-tomar/frontend/react-node-twitter-app/src/App.js\";\nimport React, { useEffect, useState, Fragment } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { Container } from 'semantic-ui-react';\nimport Header from './components/Header/Header';\nimport Tweet from './components/Tweet/Tweet';\nimport useTwitterApi from './useTwitterApi';\n\nfunction App() {\n  const [query, setQuery] = useState('bhtomar');\n  const [{\n    tweets,\n    isLoading,\n    isError\n  }, doFetch] = useTwitterApi();\n  var tweetCards = [];\n\n  function refreshTweets() {\n    tweetCards = tweets.map ? tweets.map(tweet => {\n      return /*#__PURE__*/React.createElement(Tweet, {\n        key: tweet.id,\n        tweet: tweet,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 14\n        }\n      });\n    }) : [];\n  }\n\n  return [refreshTweets(), /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }, \"Demo App using React, NodeJS and Twitter API\"))), \",\", /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: event => {\n      doFetch(`http://localhost:3001/api/v1/timeline?screen_name=${query}`);\n      event.preventDefault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: query,\n    onChange: event => setQuery(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, \"Search\")), isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, \"Loading ...\") : /*#__PURE__*/React.createElement(Container, {\n    className: \"dashboard-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, tweetCards)))];\n} // searchUserName = (newTerm) => {\n//   axios.get('http://localhost:3001/api/v1/timeline', null, { params: {\n//     user_name: newTerm\n//   } \n//   })\n//   .then(function (response) {\n//     console.log(response.data);\n//     let userTweets = response.data;\n//     this.setState({ tweets: userTweets });\n//   })\n//   .catch(function (error) {\n//     console.log(JSON.stringify(error));\n//   });\n// }\n// updateFilterTerm = (keyword) => {\n//   axios.get('http://localhost:3001/api/v1/statuses/filter', null, { params: {\n//     track: keyword\n//   } \n//   })\n//   .then(function (response) {\n//     let tweets = response.data;\n//     this.setState({ tweets });\n//   })\n//   .catch(function (error) {\n//     console.log(JSON.stringify(error));\n//   });\n// }\n// render() {\n//   let tweets = this.state.tweets.reverse()\n//   let tweetCards = tweets.map((tweet) => {\n//     return <Tweet key={tweet.id} tweet={tweet} />\n//   })\n//   return (\n//     <>\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <p>\n//           Demo App using React, NodeJS and Twitter API\n//         </p>\n//       </header>\n//     </div>,\n//     <Header searchUserName={this.searchUserName} updateFilterTerm={this.updateFilterTerm}/>\n//     <Container className=\"dashboard-container\">\n//       {tweetCards}\n//     </Container>\n//   </>\n//   );\n// }\n//}\n\n\nexport default App;","map":{"version":3,"sources":["/home/tomarb/twitter-node/slync-test-bhuvanesh-tomar/frontend/react-node-twitter-app/src/App.js"],"names":["React","useEffect","useState","Fragment","axios","Container","Header","Tweet","useTwitterApi","App","query","setQuery","tweets","isLoading","isError","doFetch","tweetCards","refreshTweets","map","tweet","id","event","preventDefault","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,QAArC,QAAqD,OAArD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,SAAD,CAAlC;AACA,QAAM,CAAC;AAAEU,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA;AAArB,GAAD,EAAiCC,OAAjC,IAA4CP,aAAa,EAA/D;AACA,MAAIQ,UAAU,GAAG,EAAjB;;AAEA,WAASC,aAAT,GAAyB;AACvBD,IAAAA,UAAU,GAAGJ,MAAM,CAACM,GAAP,GAAaN,MAAM,CAACM,GAAP,CAAYC,KAAD,IAAW;AAC9C,0BAAO,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAEA,KAAK,CAACC,EAAlB;AAAsB,QAAA,KAAK,EAAED,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFyB,CAAb,GAET,EAFJ;AAGD;;AAKD,SAAQ,CAACF,aAAa,EAAd,eACN,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDADF,CADF,CADF,oBAQA,uDACA;AAAM,IAAA,QAAQ,EAAEI,KAAK,IAAI;AACrBN,MAAAA,OAAO,CAAE,qDAAoDL,KAAM,EAA5D,CAAP;AAEAW,MAAAA,KAAK,CAACC,cAAN;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKI;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,KAAK,EAAEZ,KAFT;AAGE,IAAA,QAAQ,EAAEW,KAAK,IAAIV,QAAQ,CAACU,KAAK,CAACE,MAAN,CAAaC,KAAd,CAH7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,eAUI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ,CADA,EAaKX,SAAS,gBACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADQ,gBAGN,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,qBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,UADH,CAhBR,CARA,CADM,CAAR;AAiCD,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA,eAAeP,GAAf","sourcesContent":["import React, { useEffect, useState, Fragment } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { Container } from 'semantic-ui-react';\nimport Header from './components/Header/Header';\nimport Tweet from './components/Tweet/Tweet';\nimport useTwitterApi from './useTwitterApi';\n\nfunction App() {\n  const [query, setQuery] = useState('bhtomar');\n  const [{ tweets, isLoading, isError }, doFetch] = useTwitterApi();\n  var tweetCards = [];\n\n  function refreshTweets() {\n    tweetCards = tweets.map ? tweets.map((tweet) => {\n      return <Tweet key={tweet.id} tweet={tweet} />\n    }): [];\n  }\n\n  \n\n\n  return ([refreshTweets(),\n    <Fragment>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            Demo App using React, NodeJS and Twitter API\n        </p>\n        </header>\n      </div>,\n    <>\n    <form onSubmit={event => {\n        doFetch(`http://localhost:3001/api/v1/timeline?screen_name=${query}`);\n \n        event.preventDefault();\n      }}>\n        <input\n          type=\"text\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n        {isLoading ? (\n          <div>Loading ...</div>\n        ) : (\n            <Container className=\"dashboard-container\">\n              {tweetCards}\n            </Container>\n          )}\n      </>\n\n    </Fragment>\n  ]);\n}\n// searchUserName = (newTerm) => {\n//   axios.get('http://localhost:3001/api/v1/timeline', null, { params: {\n//     user_name: newTerm\n//   } \n//   })\n//   .then(function (response) {\n//     console.log(response.data);\n//     let userTweets = response.data;\n//     this.setState({ tweets: userTweets });\n//   })\n//   .catch(function (error) {\n//     console.log(JSON.stringify(error));\n//   });\n// }\n\n// updateFilterTerm = (keyword) => {\n//   axios.get('http://localhost:3001/api/v1/statuses/filter', null, { params: {\n//     track: keyword\n//   } \n//   })\n//   .then(function (response) {\n//     let tweets = response.data;\n//     this.setState({ tweets });\n//   })\n//   .catch(function (error) {\n//     console.log(JSON.stringify(error));\n//   });\n// }\n\n// render() {\n//   let tweets = this.state.tweets.reverse()\n//   let tweetCards = tweets.map((tweet) => {\n//     return <Tweet key={tweet.id} tweet={tweet} />\n//   })\n//   return (\n//     <>\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <p>\n//           Demo App using React, NodeJS and Twitter API\n//         </p>\n//       </header>\n//     </div>,\n//     <Header searchUserName={this.searchUserName} updateFilterTerm={this.updateFilterTerm}/>\n//     <Container className=\"dashboard-container\">\n//       {tweetCards}\n//     </Container>\n//   </>\n//   );\n// }\n\n//}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}