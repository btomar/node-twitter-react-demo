{"ast":null,"code":"var _jsxFileName = \"/home/tomarb/twitter-node/slync-test-bhuvanesh-tomar/frontend/react-node-twitter-app/src/App.js\";\nimport React, { useState, Fragment } from 'react';\nimport './App.css';\nimport { Container, Input, Divider } from 'semantic-ui-react';\nimport Tweet from './components/Tweet/Tweet';\nimport useTwitterApi from './hooks/useTwitterApi';\nimport useInterval from './hooks/useInterval';\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [search, setSearch] = useState('');\n  const [delay, setDelay] = useState(2000);\n  const [{\n    tweets,\n    isLoading,\n    isError\n  }, doFetch] = useTwitterApi();\n  var tweetCards = [];\n  useInterval(() => {\n    // Do some API call here\n    const fetchTweets = async () => {\n      setIsError(false);\n      setIsLoading(true);\n\n      try {\n        const result = await axios(`http://localhost:3001/api/v1/statuses/filter?screen_name=${query}`);\n        setTweets(result.data);\n      } catch (error) {\n        setIsError(true);\n      }\n\n      setIsLoading(false);\n    };\n\n    fetchTweets();\n    setTimeout(() => {\n      console.log('API call');\n    }, 2000);\n  }, delay);\n\n  function refreshTweets() {\n    tweetCards = tweets.map ? tweets.map(tweet => {\n      return /*#__PURE__*/React.createElement(Tweet, {\n        key: tweet.id,\n        tweet: tweet,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 14\n        }\n      });\n    }) : [];\n  }\n\n  function filterTweets() {\n    //if(tweets.length > 0) {\n    tweetCards = tweets.filter ? tweets.filter(tweet => {\n      return tweet.includes ? tweet.includes(search) : '';\n    }) : []; //}\n  }\n\n  return [refreshTweets(), /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"Demo App using React, NodeJS and Twitter API\"))), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: event => {\n      doFetch(`http://localhost:3001/api/v1/timeline?screen_name=${query}`);\n      event.preventDefault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    className: \"header-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    action: \"Search\",\n    focus: true,\n    id: \"searchInput\",\n    className: \"search-field\",\n    value: query,\n    onChange: event => setQuery(event.target.value),\n    placeholder: \"View tweets by user\",\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: event => {\n      filterTweets();\n      event.preventDefault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    className: \"header-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    focus: true,\n    id: \"filterInput\",\n    action: \"Search\",\n    className: \"search-field\",\n    value: search,\n    onChange: event => setSearch(event.target.value),\n    placeholder: \"Filter tweets by...\",\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  })), isError && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 19\n    }\n  }, \"Something went wrong ...\"), isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, \"Loading ...\") : /*#__PURE__*/React.createElement(Container, {\n    className: \"dashboard-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, tweetCards)))];\n}\n\nexport default App;","map":{"version":3,"sources":["/home/tomarb/twitter-node/slync-test-bhuvanesh-tomar/frontend/react-node-twitter-app/src/App.js"],"names":["React","useState","Fragment","Container","Input","Divider","Tweet","useTwitterApi","useInterval","App","query","setQuery","search","setSearch","delay","setDelay","tweets","isLoading","isError","doFetch","tweetCards","fetchTweets","setIsError","setIsLoading","result","axios","setTweets","data","error","setTimeout","console","log","refreshTweets","map","tweet","id","filterTweets","filter","includes","event","preventDefault","target","value"],"mappings":"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","sourcesContent":["import React, {useState, Fragment } from 'react';\nimport './App.css';\nimport {Container, Input, Divider } from 'semantic-ui-react'\nimport Tweet from './components/Tweet/Tweet';\nimport useTwitterApi from './hooks/useTwitterApi';\nimport useInterval from './hooks/useInterval';\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [search, setSearch] = useState('');\n  const [delay, setDelay] = useState(2000);\n  const [{ tweets, isLoading, isError }, doFetch] = useTwitterApi();\n  var tweetCards = [];\n\n  useInterval(() => {\n    // Do some API call here\n    const fetchTweets = async () => {\n      setIsError(false);\n      setIsLoading(true);\n \n      try {\n        const result = await axios(`http://localhost:3001/api/v1/statuses/filter?screen_name=${query}`);\n        setTweets(result.data);\n      } catch (error) {\n        setIsError(true);\n      }\n \n      setIsLoading(false);\n    };\n \n    fetchTweets();\n    setTimeout(() => {\n      console.log('API call');\n    }, 2000);\n  }, delay);\n\n  function refreshTweets() {\n    tweetCards = tweets.map ? tweets.map((tweet) => {\n      return <Tweet key={tweet.id} tweet={tweet} />\n    }) : [];\n  }\n\n  function filterTweets() {\n    //if(tweets.length > 0) {\n      tweetCards = tweets.filter? tweets.filter((tweet) => { return tweet.includes?tweet.includes(search):''}):[];\n    //}\n  }\n\n  return ([refreshTweets(),\n  <Fragment>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Demo App using React, NodeJS and Twitter API\n        </p>\n      </header>\n    </div>\n    <>\n    <div className='search-container'>\n      <form onSubmit={event => {\n        doFetch(`http://localhost:3001/api/v1/timeline?screen_name=${query}`);\n        event.preventDefault();\n      }}>\n        \n      <Container className='header-container'>\n          <Input action='Search' focus id='searchInput' className=\"search-field\" value={query} \n          onChange={event => setQuery(event.target.value)} placeholder='View tweets by user' fluid />\n      </Container>\n      </form>\n      <form onSubmit={event => {filterTweets();\n        event.preventDefault();\n      }}>\n        <Container className='header-container'>\n          <Input focus id='filterInput' action='Search' className=\"search-field\" value={search}\n            onChange={event => setSearch(event.target.value)} placeholder='Filter tweets by...' fluid />\n        </Container>\n      </form>\n      <Divider />\n    </div>\n      \n      {isError && <div>Something went wrong ...</div>}\n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n          <Container className=\"dashboard-container\">\n            {tweetCards}\n          </Container>\n        )}\n    </>\n\n  </Fragment>\n  ]);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}