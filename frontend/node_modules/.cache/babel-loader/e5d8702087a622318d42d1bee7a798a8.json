{"ast":null,"code":"var _jsxFileName = \"/home/tomarb/twitter-node/slync-test-bhuvanesh-tomar/frontend/react-node-twitter-app/src/App.js\";\nimport React, { useEffect, useState, Fragment } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { Container } from 'semantic-ui-react';\nimport Header from './components/Header/Header';\nimport Tweet from './components/Tweet/Tweet';\n\nfunction App() {\n  const [tweets, setTweets] = useState({\n    tweets: []\n  });\n  const [query, setQuery] = useState('bhtomar');\n  const [search, setSearch] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  var tweetCards = []; // function refreshTweets() {\n  //   tweetCards = tweets.map((tweet) => {\n  //     return <Tweet key={tweet.id} tweet={tweet} />\n  //   });\n  // }\n\n  useEffect(async () => {\n    const fetchTweets = async () => {\n      setIsLoading(true);\n      const result = await axios.get(`http://localhost:3001/api/v1/timeline?screen_name=${query}`); //console.log(result);\n\n      setTweets(result.data);\n      setIsLoading(false);\n    };\n\n    fetchTweets();\n  }, [query]);\n  return [tweetCards = tweets.map ? tweets.map(tweet => {\n    return /*#__PURE__*/React.createElement(Tweet, {\n      key: tweet.id,\n      tweet: tweet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 14\n      }\n    });\n  }) : [], /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, \"Demo App using React, NodeJS and Twitter API\"))), \",\", /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: query,\n    onChange: event => setQuery(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => setSearch(query),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"Search\"), isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, \"Loading ...\") : /*#__PURE__*/React.createElement(Container, {\n    className: \"dashboard-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, tweetCards)))];\n} // searchUserName = (newTerm) => {\n//   axios.get('http://localhost:3001/api/v1/timeline', null, { params: {\n//     user_name: newTerm\n//   } \n//   })\n//   .then(function (response) {\n//     console.log(response.data);\n//     let userTweets = response.data;\n//     this.setState({ tweets: userTweets });\n//   })\n//   .catch(function (error) {\n//     console.log(JSON.stringify(error));\n//   });\n// }\n// updateFilterTerm = (keyword) => {\n//   axios.get('http://localhost:3001/api/v1/statuses/filter', null, { params: {\n//     track: keyword\n//   } \n//   })\n//   .then(function (response) {\n//     let tweets = response.data;\n//     this.setState({ tweets });\n//   })\n//   .catch(function (error) {\n//     console.log(JSON.stringify(error));\n//   });\n// }\n// render() {\n//   let tweets = this.state.tweets.reverse()\n//   let tweetCards = tweets.map((tweet) => {\n//     return <Tweet key={tweet.id} tweet={tweet} />\n//   })\n//   return (\n//     <>\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <p>\n//           Demo App using React, NodeJS and Twitter API\n//         </p>\n//       </header>\n//     </div>,\n//     <Header searchUserName={this.searchUserName} updateFilterTerm={this.updateFilterTerm}/>\n//     <Container className=\"dashboard-container\">\n//       {tweetCards}\n//     </Container>\n//   </>\n//   );\n// }\n//}\n\n\nexport default App;","map":{"version":3,"sources":["/home/tomarb/twitter-node/slync-test-bhuvanesh-tomar/frontend/react-node-twitter-app/src/App.js"],"names":["React","useEffect","useState","Fragment","axios","Container","Header","Tweet","App","tweets","setTweets","query","setQuery","search","setSearch","isLoading","setIsLoading","tweetCards","fetchTweets","result","get","data","map","tweet","id","event","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Fragment } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { Container } from 'semantic-ui-react';\nimport Header from './components/Header/Header';\nimport Tweet from './components/Tweet/Tweet';\n\nfunction App() {\n  const [tweets, setTweets] = useState({ tweets: [] });\n  const [query, setQuery] = useState('bhtomar');\n  const [search, setSearch] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  var tweetCards = [];\n\n  // function refreshTweets() {\n  //   tweetCards = tweets.map((tweet) => {\n  //     return <Tweet key={tweet.id} tweet={tweet} />\n  //   });\n  // }\n\n  useEffect(async () => {\n    const fetchTweets = async () => {\n      setIsLoading(true);\n      const result = await axios.get(`http://localhost:3001/api/v1/timeline?screen_name=${query}`);\n      //console.log(result);\n      setTweets(result.data);\n      setIsLoading(false);\n\n    };\n    fetchTweets();\n\n  }, [query]);\n\n\n\n  return ([\n    tweetCards = tweets.map ? tweets.map((tweet) => {\n      return <Tweet key={tweet.id} tweet={tweet} />\n    }) : [],\n    <Fragment>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            Demo App using React, NodeJS and Twitter API\n        </p>\n        </header>\n      </div>,\n    <>\n        <input\n          type=\"text\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}\n        />\n        <button type=\"button\" onClick={() => setSearch(query)}>\n          Search\n      </button>\n        {isLoading ? (\n          <div>Loading ...</div>\n        ) : (\n            <Container className=\"dashboard-container\">\n              {tweetCards}\n            </Container>\n          )}\n      </>\n\n    </Fragment>\n  ]);\n}\n// searchUserName = (newTerm) => {\n//   axios.get('http://localhost:3001/api/v1/timeline', null, { params: {\n//     user_name: newTerm\n//   } \n//   })\n//   .then(function (response) {\n//     console.log(response.data);\n//     let userTweets = response.data;\n//     this.setState({ tweets: userTweets });\n//   })\n//   .catch(function (error) {\n//     console.log(JSON.stringify(error));\n//   });\n// }\n\n// updateFilterTerm = (keyword) => {\n//   axios.get('http://localhost:3001/api/v1/statuses/filter', null, { params: {\n//     track: keyword\n//   } \n//   })\n//   .then(function (response) {\n//     let tweets = response.data;\n//     this.setState({ tweets });\n//   })\n//   .catch(function (error) {\n//     console.log(JSON.stringify(error));\n//   });\n// }\n\n// render() {\n//   let tweets = this.state.tweets.reverse()\n//   let tweetCards = tweets.map((tweet) => {\n//     return <Tweet key={tweet.id} tweet={tweet} />\n//   })\n//   return (\n//     <>\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <p>\n//           Demo App using React, NodeJS and Twitter API\n//         </p>\n//       </header>\n//     </div>,\n//     <Header searchUserName={this.searchUserName} updateFilterTerm={this.updateFilterTerm}/>\n//     <Container className=\"dashboard-container\">\n//       {tweetCards}\n//     </Container>\n//   </>\n//   );\n// }\n\n//}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}